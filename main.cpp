#include <QCoreApplication>
#include <QDir>
#include <stdio.h>

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    FILE *myMakefile, *newMakefile, *myMakeCFG;
    QDir dir;
    QString currdir, myMakefileDir, newMakefileDir, myMakeCFGDir;
    char gccFileDir[260], mbedDir[260], makePath[260], projectName[260];
    int i, j;
    char c, auxStr[2048];

    if(argc != 3){
        printf("ERROR. NOT Enought arguments\n");
        return 1;
    }

    currdir = dir.currentPath();// qApp->applicationDirPath();

    myMakefileDir = currdir + "/myMakefile";
    newMakefileDir = currdir + "/Makefile";
    myMakeCFGDir = currdir + "/myMakeCFG";

    j = 0;
    i = 0;
    while (i != currdir.length()) {
        auxStr[j] = currdir.toUtf8().data()[i++];
        if(auxStr[j]=='\\' || auxStr[j]=='/')
            j = 0;
        else
            j++;
    }
    auxStr[j] = '\0';
    strcpy(projectName, auxStr);

    if ((myMakeCFG = fopen(myMakeCFGDir.toUtf8().data(), "rt"))== NULL){
        fprintf(stderr, "Cannot open Configuration for Makefile file.\n");
        fprintf(stderr, "Please execute MyConfigMake to generate this file.\n");
        return 1;
    }

    fscanf(myMakeCFG, "%s", gccFileDir);
    fscanf(myMakeCFG, "%s", mbedDir);
    fscanf(myMakeCFG, "%s", makePath);

    if(!dir.exists(QString(gccFileDir))){
        printf("ERROR DIR for COMPILER_BIN_EXE doesn't EXIST\n");
        printf("Trying execute MyConfigMake first.\n");
        return 1;
    }

    if(!dir.exists(QString(mbedDir))){
        printf("ERROR MBED DIR doesn't EXIST\n");
        printf("Trying execute MyConfigMake first.\n");
        return 1;
    }

    if(!dir.exists(QString(makePath))){
        printf("ERROR MAKE file dir doesn't EXIST\n");
        printf("Trying execute MyConfigMake first.\n");
        return 1;
    }

    i = strlen(mbedDir);
    while(mbedDir[i]!='\\' && mbedDir[i]!='/')
        i--;
    mbedDir[i] = '\0';

    printf("%s\n", gccFileDir);
    printf("%s\n", mbedDir);
    printf("%s\n", makePath);
    printf("%s\n", projectName);

    if ((myMakefile = fopen(myMakefileDir.toUtf8().data(), "rt"))== NULL){
            fprintf(stderr, "Cannot open myMakefile file.\n");
            return 1;
    }

    if ((newMakefile = fopen(newMakefileDir.toUtf8().data(), "wt"))== NULL){
        fprintf(stderr, "Cannot open Makefile file.\n");
        return 1;
    }

    printf("%s\n", myMakefileDir.toUtf8().data());
    printf("%s\n", newMakefileDir.toUtf8().data());

    /*
    # This file was automagically generated by mbed.org. For more information,
    # see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

    ###############################################################################
    PROJECTPATH = D:/PROJECTS/MBED103BINs/AutoDC
    COMPILERDIR = D:/PROJECTS/MBEDGCC/gcc-arm-none-eabi-6-2017-q2-update-win32/bin
    MBEDPATH = D:/PROJECTS/MBEDGCC
    ###############################################################################
    # Boiler-plate
    */

    fprintf(newMakefile, "%s\n", "# This file was automagically generated by UNER - CP3");
    fputc('\n', newMakefile);
    fprintf(newMakefile, "%s\n", "###############################################################################");
    i = 0;
    while(currdir.toUtf8().data()[i]){
        if(currdir[i] == '\\')
            currdir[i] = '/';
        i++;
    }
    printf("PROJECTPATH = %s\n", currdir.toUtf8().data());
    fprintf(newMakefile, "PROJECTPATH = %s\n", currdir.toUtf8().data());
    i = 0;
    while(gccFileDir[i]){
        if(gccFileDir[i] == '\\')
            gccFileDir[i] = '/';
        i++;
    }
    printf("COMPILERDIR = %s\n", gccFileDir);
    fprintf(newMakefile, "COMPILERDIR = %s\n", gccFileDir);

    i = 0;
    while(mbedDir[i]){
        if(mbedDir[i] == '\\')
            mbedDir[i] = '/';
        i++;
    }
    printf("MBEDPATH = %s\n", mbedDir);
    fprintf(newMakefile, "MBEDPATH = %s\n", mbedDir);


    fputc('\n', newMakefile);
    fprintf(newMakefile, "%s\n", "###############################################################################");
    i = 0;
    while (!feof(myMakefile)){
        c = fgetc(myMakefile);
        if(c != char(255))
            fputc(c, newMakefile);
        auxStr[i] = c;
        if(c == '\n'){
            auxStr[i]='\0';
            if(strcmp("# PROJECT := ProjectOut", auxStr) == 0){
                strcpy(auxStr, "PROJECT := ");
                strncat(auxStr, projectName, 2047);
                strncat(auxStr, "\n", 10);
                fputs(auxStr, newMakefile);
            }
            i = 0;
        }
        else{
            i++;
            if(i == 4096)
                i = 0;
        }
    }

    fclose(myMakefile);
    fclose(newMakefile);

    printf("Makefile GENERATED\n");
    printf("Executing make...\n");

#ifdef WIN32
    for(int i=0; i<(int)strlen(makePath); i++){
        if(makePath[i] == '/')
            makePath[i] = '\\';
    }
    strncat(makePath, "\\make.exe", 250);
#else
    strncat(makePath, "/make", 250);
#endif

    printf("%s\n", makePath);
    strncpy(auxStr, makePath, 260);
    strncat(auxStr," ", 2);
    strncat(auxStr, argv[1], 260);
    strncat(auxStr," ", 2);
    strncat(auxStr, argv[2], 260);
    printf("%s\n", auxStr);

    system(auxStr);

    return 0;

//    return a.exec();
}
